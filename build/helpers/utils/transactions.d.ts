import { SignDoc } from '../../codegen/cosmos/tx/v1beta1/tx';
import { SignMode } from '../../codegen/cosmos/tx/signing/v1beta1/signing';
import { Doc, SignMsg, DocSigner, Fee } from '../types';
import { LumTypes } from '..';
/**
 * Generate transaction auth info payload
 *
 * @param docSigners Document signers
 * @param fee requested fee
 * @param signMode signing mode
 */
export declare const generateAuthInfoBytes: (docSigners: DocSigner[], fee: Fee, signMode: SignMode) => Uint8Array;
/**
 * Generate transaction doc to be signed
 *
 * @param doc document to create the sign version
 * @param signerIdx index of the signer in the signers field used to specify the accountNumber for signature purpose
 * @param signMode signing mode for the transaction
 */
export declare const generateSignDoc: (doc: Doc, signerIdx: number, signMode: SignMode) => SignDoc;
/**
 * Generate transaction sign doc bytes used to sign the transaction
 *
 * @param signDoc sign doc (as generated by the generateSignDoc function)
 */
export declare const generateSignDocBytes: (signDoc: SignDoc) => Uint8Array;
/**
 * Generate transaction signature
 *
 * @param hashedMessage sha256 hash of the sign doc bytes (as generated by the generateSignDocBytes function)
 * @param privateKey private key used to sign the transaction (secp256k1)
 */
export declare const generateSignature: (hashedMessage: Uint8Array, privateKey: Uint8Array) => Promise<Uint8Array>;
/**
 * Generate transaction bytes to broadcast
 *
 * @param signDoc sign doc (as generated by the generateSignDoc function)
 * @param signatures transaction signatures (as generated by the generateSignature function)
 */
export declare const generateTxBytes: (signDoc: LumTypes.SignDoc, signatures: Uint8Array[]) => Uint8Array;
/**
 * Verify that a signature is valid
 *
 * @param signature signature (as generated by the generateSignature function)
 * @param signedBytes signed bytes (as generated by the generateSignDocBytes function or by the signMessage function)
 * @param publicKey public key of the signing key pair (secp256k1)
 */
export declare const verifySignature: (signature: Uint8Array, signedBytes: Uint8Array, publicKey: Uint8Array) => Promise<boolean>;
/**
 * Verify that a message is signed by the provided publicKey
 * Will also verify that the address is indeed derivated by the provided publicKey
 *
 * @param msg Message to verify such as generated by the LumWallet.signMessage method
 */
export declare const verifySignMsg: (msg: SignMsg) => Promise<boolean>;
